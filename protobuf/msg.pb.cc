// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_usr_info_msg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_usr_login_msg_2eproto;
namespace test_2 {
class usr_loginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<usr_login> _instance;
} _usr_login_default_instance_;
class usr_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<usr_info> _instance;
} _usr_info_default_instance_;
class studentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<student> _instance;
} _student_default_instance_;
}  // namespace test_2
static void InitDefaultsscc_info_student_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test_2::_student_default_instance_;
    new (ptr) ::test_2::student();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_student_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_student_msg_2eproto}, {
      &scc_info_usr_login_msg_2eproto.base,
      &scc_info_usr_info_msg_2eproto.base,}};

static void InitDefaultsscc_info_usr_info_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test_2::_usr_info_default_instance_;
    new (ptr) ::test_2::usr_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_usr_info_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_usr_info_msg_2eproto}, {}};

static void InitDefaultsscc_info_usr_login_msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::test_2::_usr_login_default_instance_;
    new (ptr) ::test_2::usr_login();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_usr_login_msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_usr_login_msg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::usr_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test_2::usr_login, usrname_),
  PROTOBUF_FIELD_OFFSET(::test_2::usr_login, usrpasswd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::usr_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test_2::usr_info, classrome_),
  PROTOBUF_FIELD_OFFSET(::test_2::usr_info, studentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::student, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::test_2::student, stamp_),
  PROTOBUF_FIELD_OFFSET(::test_2::student, usrlogin_),
  PROTOBUF_FIELD_OFFSET(::test_2::student, usrinfo_),
  PROTOBUF_FIELD_OFFSET(::test_2::student, array_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::test_2::usr_login)},
  { 7, -1, sizeof(::test_2::usr_info)},
  { 14, -1, sizeof(::test_2::student)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_usr_login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_usr_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_student_default_instance_),
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\006test_2\"/\n\tusr_login\022\017\n\007usrn"
  "ame\030\001 \001(\t\022\021\n\tusrpasswd\030\002 \001(\t\"0\n\010usr_info"
  "\022\021\n\tclassrome\030\001 \001(\005\022\021\n\tstudentID\030\002 \001(\t\"o"
  "\n\007student\022\r\n\005STAMP\030\001 \001(\005\022#\n\010usrLogin\030\002 \001"
  "(\0132\021.test_2.usr_login\022!\n\007usrInfo\030\003 \001(\0132\020"
  ".test_2.usr_info\022\r\n\005array\030\004 \003(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_msg_2eproto_sccs[3] = {
  &scc_info_student_msg_2eproto.base,
  &scc_info_usr_info_msg_2eproto.base,
  &scc_info_usr_login_msg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto = {
  false, false, descriptor_table_protodef_msg_2eproto, "msg.proto", 239,
  &descriptor_table_msg_2eproto_once, descriptor_table_msg_2eproto_sccs, descriptor_table_msg_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
  file_level_metadata_msg_2eproto, 3, file_level_enum_descriptors_msg_2eproto, file_level_service_descriptors_msg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace test_2 {

// ===================================================================

class usr_login::_Internal {
 public:
};

usr_login::usr_login(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:test_2.usr_login)
}
usr_login::usr_login(const usr_login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  usrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usrname().empty()) {
    usrname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_usrname(), 
      GetArena());
  }
  usrpasswd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usrpasswd().empty()) {
    usrpasswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_usrpasswd(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.usr_login)
}

void usr_login::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_usr_login_msg_2eproto.base);
  usrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usrpasswd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

usr_login::~usr_login() {
  // @@protoc_insertion_point(destructor:test_2.usr_login)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void usr_login::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  usrname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usrpasswd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void usr_login::ArenaDtor(void* object) {
  usr_login* _this = reinterpret_cast< usr_login* >(object);
  (void)_this;
}
void usr_login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void usr_login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const usr_login& usr_login::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_usr_login_msg_2eproto.base);
  return *internal_default_instance();
}


void usr_login::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.usr_login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usrname_.ClearToEmpty();
  usrpasswd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* usr_login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string usrname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_usrname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.usr_login.usrname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usrpasswd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_usrpasswd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.usr_login.usrpasswd"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* usr_login::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.usr_login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string usrname = 1;
  if (this->usrname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usrname().data(), static_cast<int>(this->_internal_usrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.usr_login.usrname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_usrname(), target);
  }

  // string usrpasswd = 2;
  if (this->usrpasswd().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usrpasswd().data(), static_cast<int>(this->_internal_usrpasswd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.usr_login.usrpasswd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_usrpasswd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.usr_login)
  return target;
}

size_t usr_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.usr_login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string usrname = 1;
  if (this->usrname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usrname());
  }

  // string usrpasswd = 2;
  if (this->usrpasswd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usrpasswd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void usr_login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test_2.usr_login)
  GOOGLE_DCHECK_NE(&from, this);
  const usr_login* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<usr_login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test_2.usr_login)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test_2.usr_login)
    MergeFrom(*source);
  }
}

void usr_login::MergeFrom(const usr_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.usr_login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.usrname().size() > 0) {
    _internal_set_usrname(from._internal_usrname());
  }
  if (from.usrpasswd().size() > 0) {
    _internal_set_usrpasswd(from._internal_usrpasswd());
  }
}

void usr_login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test_2.usr_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void usr_login::CopyFrom(const usr_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.usr_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool usr_login::IsInitialized() const {
  return true;
}

void usr_login::InternalSwap(usr_login* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  usrname_.Swap(&other->usrname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  usrpasswd_.Swap(&other->usrpasswd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata usr_login::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class usr_info::_Internal {
 public:
};

usr_info::usr_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:test_2.usr_info)
}
usr_info::usr_info(const usr_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  studentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_studentid().empty()) {
    studentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_studentid(), 
      GetArena());
  }
  classrome_ = from.classrome_;
  // @@protoc_insertion_point(copy_constructor:test_2.usr_info)
}

void usr_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_usr_info_msg_2eproto.base);
  studentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  classrome_ = 0;
}

usr_info::~usr_info() {
  // @@protoc_insertion_point(destructor:test_2.usr_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void usr_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  studentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void usr_info::ArenaDtor(void* object) {
  usr_info* _this = reinterpret_cast< usr_info* >(object);
  (void)_this;
}
void usr_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void usr_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const usr_info& usr_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_usr_info_msg_2eproto.base);
  return *internal_default_instance();
}


void usr_info::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.usr_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  studentid_.ClearToEmpty();
  classrome_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* usr_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 classrome = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          classrome_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string studentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_studentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.usr_info.studentID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* usr_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.usr_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 classrome = 1;
  if (this->classrome() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_classrome(), target);
  }

  // string studentID = 2;
  if (this->studentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_studentid().data(), static_cast<int>(this->_internal_studentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.usr_info.studentID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_studentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.usr_info)
  return target;
}

size_t usr_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.usr_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string studentID = 2;
  if (this->studentid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_studentid());
  }

  // int32 classrome = 1;
  if (this->classrome() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_classrome());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void usr_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test_2.usr_info)
  GOOGLE_DCHECK_NE(&from, this);
  const usr_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<usr_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test_2.usr_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test_2.usr_info)
    MergeFrom(*source);
  }
}

void usr_info::MergeFrom(const usr_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.usr_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.studentid().size() > 0) {
    _internal_set_studentid(from._internal_studentid());
  }
  if (from.classrome() != 0) {
    _internal_set_classrome(from._internal_classrome());
  }
}

void usr_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test_2.usr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void usr_info::CopyFrom(const usr_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.usr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool usr_info::IsInitialized() const {
  return true;
}

void usr_info::InternalSwap(usr_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  studentid_.Swap(&other->studentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(classrome_, other->classrome_);
}

::PROTOBUF_NAMESPACE_ID::Metadata usr_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class student::_Internal {
 public:
  static const ::test_2::usr_login& usrlogin(const student* msg);
  static const ::test_2::usr_info& usrinfo(const student* msg);
};

const ::test_2::usr_login&
student::_Internal::usrlogin(const student* msg) {
  return *msg->usrlogin_;
}
const ::test_2::usr_info&
student::_Internal::usrinfo(const student* msg) {
  return *msg->usrinfo_;
}
student::student(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  array_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:test_2.student)
}
student::student(const student& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      array_(from.array_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_usrlogin()) {
    usrlogin_ = new ::test_2::usr_login(*from.usrlogin_);
  } else {
    usrlogin_ = nullptr;
  }
  if (from._internal_has_usrinfo()) {
    usrinfo_ = new ::test_2::usr_info(*from.usrinfo_);
  } else {
    usrinfo_ = nullptr;
  }
  stamp_ = from.stamp_;
  // @@protoc_insertion_point(copy_constructor:test_2.student)
}

void student::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_student_msg_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&usrlogin_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&stamp_) -
      reinterpret_cast<char*>(&usrlogin_)) + sizeof(stamp_));
}

student::~student() {
  // @@protoc_insertion_point(destructor:test_2.student)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void student::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete usrlogin_;
  if (this != internal_default_instance()) delete usrinfo_;
}

void student::ArenaDtor(void* object) {
  student* _this = reinterpret_cast< student* >(object);
  (void)_this;
}
void student::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void student::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const student& student::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_student_msg_2eproto.base);
  return *internal_default_instance();
}


void student::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.student)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_.Clear();
  if (GetArena() == nullptr && usrlogin_ != nullptr) {
    delete usrlogin_;
  }
  usrlogin_ = nullptr;
  if (GetArena() == nullptr && usrinfo_ != nullptr) {
    delete usrinfo_;
  }
  usrinfo_ = nullptr;
  stamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* student::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 STAMP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .test_2.usr_login usrLogin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_usrlogin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .test_2.usr_info usrInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_usrinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_array(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* student::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.student)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 STAMP = 1;
  if (this->stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stamp(), target);
  }

  // .test_2.usr_login usrLogin = 2;
  if (this->has_usrlogin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::usrlogin(this), target, stream);
  }

  // .test_2.usr_info usrInfo = 3;
  if (this->has_usrinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::usrinfo(this), target, stream);
  }

  // repeated int32 array = 4;
  {
    int byte_size = _array_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_array(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.student)
  return target;
}

size_t student::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.student)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 array = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->array_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _array_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .test_2.usr_login usrLogin = 2;
  if (this->has_usrlogin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usrlogin_);
  }

  // .test_2.usr_info usrInfo = 3;
  if (this->has_usrinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usrinfo_);
  }

  // int32 STAMP = 1;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void student::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test_2.student)
  GOOGLE_DCHECK_NE(&from, this);
  const student* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<student>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test_2.student)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test_2.student)
    MergeFrom(*source);
  }
}

void student::MergeFrom(const student& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.student)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_.MergeFrom(from.array_);
  if (from.has_usrlogin()) {
    _internal_mutable_usrlogin()->::test_2::usr_login::MergeFrom(from._internal_usrlogin());
  }
  if (from.has_usrinfo()) {
    _internal_mutable_usrinfo()->::test_2::usr_info::MergeFrom(from._internal_usrinfo());
  }
  if (from.stamp() != 0) {
    _internal_set_stamp(from._internal_stamp());
  }
}

void student::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test_2.student)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void student::CopyFrom(const student& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.student)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool student::IsInitialized() const {
  return true;
}

void student::InternalSwap(student* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  array_.InternalSwap(&other->array_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(student, stamp_)
      + sizeof(student::stamp_)
      - PROTOBUF_FIELD_OFFSET(student, usrlogin_)>(
          reinterpret_cast<char*>(&usrlogin_),
          reinterpret_cast<char*>(&other->usrlogin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata student::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace test_2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test_2::usr_login* Arena::CreateMaybeMessage< ::test_2::usr_login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::usr_login >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::usr_info* Arena::CreateMaybeMessage< ::test_2::usr_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::usr_info >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::student* Arena::CreateMaybeMessage< ::test_2::student >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::student >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
